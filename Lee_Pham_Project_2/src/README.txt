In this project you will use object-oriented design techniques to implement and encapsulate an abstract data type (ADT) known as a cache. A cache is a data structure that provides accelerated access to a relatively small subset of data that normally take a relatively long time to access. Caches are associative such that the user/client (we will use both names interchangeably) requests the value associated with a certain key. For example, in a web cache, a key might be the URL of a page on a web server, and the associated value might be the contents of the web page itself. For an image cache that allows the client to access frequently used images more quickly than having to load them from disk, the key might be the name of the image (e.g., "smurf"), and the value would be the image itself (e.g., the bytes contents of a PNG file). A cache serves as an intermediary between the user/client and a data provider -- the web server or file system, in our two examples above. By using a cache to store a small subset of data in faster storage, the client application can often be accelerated significantly. Caches are ubiquitous in modern computer design; CPU caches, disk caches, web caches, etc., are all commonplace.

By definition, caches can only store a subset of all possible (key,value) combinations that a user might request. Why? The reason is that caches provide accelerated access to data -- if they could contain an infinite number of data and provide them faster than the data provider (the web server in our example above), then there would be no need for the data provider at all -- you would just store everything in the cache. The fact that caches can only store a relatively small number of (key,value) pairs compared to the set of all possible such pairs that the user might request, means that the implementer of the cache has to think carefully about which data should be stored. In addition, the implementer of the cache must ensure that access to data is as fast as possible -- determining whether or not a (key,value) pair is already stored in the cache should happen in constant time. Recall that constant time means that the amount of time does not depend on the number of data in the cache.
